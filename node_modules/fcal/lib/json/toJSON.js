"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const numberSystem_1 = require("../types/numberSystem");
const units_1 = require("../types/units");
var JSON_TYPES;
(function (JSON_TYPES) {
    JSON_TYPES["BINARY"] = "binary";
    JSON_TYPES["GROUP"] = "group";
    JSON_TYPES["LITERAL"] = "literal";
    JSON_TYPES["UNARY"] = "unary";
    JSON_TYPES["PERCENTAGE"] = "percentage";
    JSON_TYPES["UNIT"] = "unit";
    JSON_TYPES["CONVERSION"] = "conversion";
    JSON_TYPES["ASSIGN"] = "assign";
    JSON_TYPES["VARIABLE"] = "variable";
    JSON_TYPES["CALL"] = "call";
    JSON_TYPES["LOGICAL"] = "logical";
    JSON_TYPES["TERNARY"] = "ternary";
})(JSON_TYPES || (JSON_TYPES = {}));
exports.JSON_TYPES = JSON_TYPES;
class ToJSON {
    constructor(ast) {
        this.ast = ast;
    }
    toJSON() {
        const astObj = this.toObj();
        return JSON.stringify(astObj);
    }
    toObj() {
        return this.evaluate(this.ast);
    }
    visitBinaryExpr(expr) {
        const right = this.evaluate(expr.right);
        const left = this.evaluate(expr.left);
        const operator = expr.operator;
        return { type: JSON_TYPES.BINARY, right, left, operator };
    }
    visitGroupingExpr(expr) {
        return { type: JSON_TYPES.GROUP, value: this.evaluate(expr.expression) };
    }
    visitLiteralExpr(expr) {
        return { type: JSON_TYPES.LITERAL, value: expr.value.print() };
    }
    visitUnaryExpr(expr) {
        return { type: JSON_TYPES.UNARY, operator: expr.operator, value: this.evaluate(expr.right) };
    }
    visitPercentageExpr(expr) {
        return { type: JSON_TYPES.PERCENTAGE, value: this.evaluate(expr.expression) };
    }
    visitUnitExpr(expr) {
        return { type: JSON_TYPES.UNIT, phrase: expr.phrase, value: this.evaluate(expr.expression) };
    }
    visitConversionExpr(expr) {
        const value = this.evaluate(expr.expression);
        if (expr.to instanceof units_1.UnitMeta) {
            return { type: JSON_TYPES.CONVERSION, unit: expr.name, value };
        }
        if (expr.to instanceof numberSystem_1.NumberSystem) {
            return { type: JSON_TYPES.CONVERSION, ns: expr.name, value };
        }
        return { type: JSON_TYPES.CONVERSION, converter: expr.name, value };
    }
    visitAssignExpr(expr) {
        return { type: JSON_TYPES.ASSIGN, variable: expr.name, value: this.evaluate(expr.value) };
    }
    visitVariableExpr(expr) {
        return { type: JSON_TYPES.VARIABLE, name: expr.name };
    }
    visitCallExpr(expr) {
        const args = Array();
        for (const arg of expr.argument) {
            args.push(this.evaluate(arg));
        }
        return { type: JSON_TYPES.CALL, name: expr.name, args };
    }
    visitLogicalExpr(expr) {
        const right = this.evaluate(expr.left);
        const left = this.evaluate(expr.left);
        const operator = expr.operator;
        return { type: JSON_TYPES.LOGICAL, right, left, operator };
    }
    visitTernaryExpr(expr) {
        const trueExpr = this.evaluate(expr.trueExpr);
        const falseExpr = this.evaluate(expr.falseExpr);
        const main = this.evaluate(expr.main);
        return { type: JSON_TYPES.TERNARY, main, trueExpr, falseExpr };
    }
    evaluate(expr) {
        const ast = expr.accept(this);
        return Object.assign({ start: expr.start, end: expr.end }, ast);
    }
}
exports.ToJSON = ToJSON;
