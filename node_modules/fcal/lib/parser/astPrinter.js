"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const numberSystem_1 = require("../types/numberSystem");
const units_1 = require("../types/units");
class ASTPrinter {
    constructor() {
        this.depth = 0;
    }
    static createPrefix(depth, type) {
        return `${this.prefixChar}${'-'.repeat(depth * this.tab)} (${depth / this.tab})${type}`;
    }
    visitTernaryExpr(expr) {
        this.depth += ASTPrinter.tab;
        const main = this.evaluate(expr.main);
        const trueExpr = this.evaluate(expr.trueExpr);
        const falseExpr = this.evaluate(expr.falseExpr);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'TERNARY')}\n|\n${main}${trueExpr}${falseExpr}`;
    }
    visitCallExpr(expr) {
        let str = `${ASTPrinter.createPrefix(this.depth, 'FUNCTION')} ==> ${expr.name} `;
        this.depth += ASTPrinter.tab;
        for (const arg of expr.argument) {
            str = `${str} \n|\n${this.evaluate(arg)}`;
        }
        this.depth -= ASTPrinter.tab;
        return str;
    }
    visitAssignExpr(expr) {
        this.depth += ASTPrinter.tab;
        const value = this.evaluate(expr.value);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'ASSIGN')} ${expr.name} \n|\n${value}`;
    }
    visitVariableExpr(expr) {
        return `${ASTPrinter.createPrefix(this.depth, 'VARIABLE')} ${expr.name}\n|\n`;
    }
    visitUnitExpr(expr) {
        this.depth += ASTPrinter.tab;
        const expression = this.evaluate(expr.expression);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'UNIT')} ${expr.unit.unitType} \n|\n${expression}`;
    }
    visitConversionExpr(expr) {
        this.depth += ASTPrinter.tab;
        const expression = this.evaluate(expr.expression);
        this.depth -= ASTPrinter.tab;
        if (expr.to instanceof units_1.UnitMeta) {
            return `${ASTPrinter.createPrefix(this.depth, 'UNIT CONVERT')} ${expr.name} \n|\n${expression}`;
        }
        if (expr.to instanceof numberSystem_1.NumberSystem) {
            return `${ASTPrinter.createPrefix(this.depth, 'NUMERICAL SYSTEM')} ${expr.name} \n|\n${expression}`;
        }
        return `${ASTPrinter.createPrefix(this.depth, 'CONVERTER')} ${expr.name} \n|\n${expression}`;
    }
    visitLogicalExpr(expr) {
        this.depth += ASTPrinter.tab;
        const left = this.evaluate(expr.left);
        const right = this.evaluate(expr.right);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'LOGICAL')}  ${expr.operator.type} \n|\n${left}${right}`;
    }
    visitBinaryExpr(expr) {
        this.depth += ASTPrinter.tab;
        const left = this.evaluate(expr.left);
        const right = this.evaluate(expr.right);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'BINARY')}  ${expr.operator.type} \n|\n${left}${right}`;
    }
    visitGroupingExpr(expr) {
        this.depth += ASTPrinter.tab;
        const expression = this.evaluate(expr.expression);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'GROUPING')} \n|\n${expression}`;
    }
    visitLiteralExpr(expr) {
        return `${ASTPrinter.createPrefix(this.depth, 'LITERAL')} ${expr.value.print()}\n|\n`;
    }
    visitUnaryExpr(expr) {
        this.depth += ASTPrinter.tab;
        const expression = this.evaluate(expr.right);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'UNARY')} ${expr.operator.type} \n|\n${expression}`;
    }
    visitPercentageExpr(expr) {
        this.depth += ASTPrinter.tab;
        const expression = this.evaluate(expr.expression);
        this.depth -= ASTPrinter.tab;
        return `${ASTPrinter.createPrefix(this.depth, 'PERCENTAGE')} \n|\n${expression}`;
    }
    print(expr) {
        return this.evaluate(expr);
    }
    evaluate(expr) {
        const ast = expr.accept(this);
        return ast;
    }
}
exports.ASTPrinter = ASTPrinter;
ASTPrinter.tab = 2;
ASTPrinter.prefixChar = '+';
