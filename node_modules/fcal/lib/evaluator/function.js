"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const decimal_js_1 = require("decimal.js");
const fcal_1 = require("../fcal");
const datatype_1 = require("../types/datatype");
/**
 * FcalFunction represents function in fcal
 */
class FcalFunction {
    /**
     * Create new Fcal function
     * @param name name of the function
     * @param arity number of arguments function can expect, -1 for any number of functions
     * @param func function implementation
     */
    constructor(name, arity, func) {
        this.arity = arity;
        this.function = func;
        this.name = name;
    }
    /**
     * call the function
     * @param {Environment} environment state of fcal
     * @param {Array<Type>} argument arguments of the function
     * @returns {Type} function result
     * @throws {FcalError} Error if function return invalid return type
     */
    call(environment, argument) {
        const value = this.function(environment, argument);
        if (!value) {
            // if function does not return no value then
            // Assign basic 0 number
            return datatype_1.Type.BNumber.New(0);
        }
        if (typeof value === 'number' || value instanceof decimal_js_1.Decimal) {
            return datatype_1.Type.BNumber.New(value);
        }
        if (!(value instanceof datatype_1.Type)) {
            throw new fcal_1.FcalError(`${this.name} Function Invalid return type,  Expecting Fcal.Type but got ${typeof value}`);
        }
        return value;
    }
}
exports.FcalFunction = FcalFunction;
/**
 * List of fcal functions
 */
(function (FcalFunction) {
    class List {
        constructor() {
            this.functions = new Map();
        }
        /**
         * Add new fcal function
         * @param {FcalFunction} fcalFunction
         * @throws {FcalError} Error if function name is already exists
         */
        push(ff) {
            if (ff.arity < -1) {
                throw new fcal_1.FcalError(`Can not register ${ff.name}, arity should be greater than or equal to -1 but got ${ff.arity}`);
            }
            if (ff.arity >= 255) {
                throw new fcal_1.FcalError(`Can not register ${ff.name}, function cannot have more than 254 arguments`);
            }
            if (ff.arity % 1 !== 0) {
                throw new fcal_1.FcalError(`Can not register ${ff.name}, arity should be Integer`);
            }
            this.functions.set(ff.name, ff);
        }
        /**
         * Call a function by its name
         * @param {string} name name of the function
         * @param {Environment} environment state of fcal
         * @param {Array<Type>} argument arguments for the function
         * @param {Type} Type result of the function
         * @throws {FcalError} Error if function is not found
         */
        call(name, environment, argument) {
            const fcalFunc = this.get(name);
            if (fcalFunc) {
                return fcalFunc.function(environment, argument);
            }
            throw new fcal_1.FcalError(`Function ${name} is not found`);
        }
        /**
         * Get function implementation by its function name
         * @param {string} name function name
         * @returns {FcalFunction | undefined} function
         */
        get(name) {
            return this.functions.get(name);
        }
    }
    FcalFunction.List = List;
})(FcalFunction || (FcalFunction = {}));
exports.FcalFunction = FcalFunction;
