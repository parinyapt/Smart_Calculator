"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fcal_1 = require("../fcal");
/**
 * SymbolTable maintains registry of words with its types
 */
class SymbolTable {
    /**
     * Create new symbol table
     * @param {SymbolTable | undefined}parent parent of the symbol table
     */
    constructor(parent) {
        if (parent) {
            this.registry = new Map();
            this.parent = parent;
            return;
        }
        this.registry = new Map();
        this.registry.set('bin', Entity.NS);
        this.registry.set('binary', Entity.NS);
        this.registry.set('dec', Entity.NS);
        this.registry.set('decimal', Entity.NS);
        this.registry.set('hex', Entity.NS);
        this.registry.set('hexadecimal', Entity.NS);
        this.registry.set('oct', Entity.NS);
        this.registry.set('octal', Entity.NS);
        this.registry.set('_', Entity.VARIABLE);
    }
    /**
     * Register new phrase or word in symbol table
     * @param {string} phrase phrase
     * @param {Entity} entity type of the phrase
     * @throws {FcalError} if word is already registered
     */
    set(phrase, entity) {
        const c = this.get(phrase);
        if (c) {
            throw new fcal_1.FcalError(`${phrase} is already used in ${c.toLowerCase()}`);
        }
        this.registry.set(phrase, entity);
    }
    /**
     * search symbol table whether phrase is already registered
     * @param {string} phrase phrase or word
     * @returns {Entity} entity or type of the phrase
     */
    get(phrase) {
        var _a;
        const value = this.registry.get(phrase);
        if (value) {
            return value;
        }
        return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.get(phrase);
    }
}
exports.SymbolTable = SymbolTable;
var Entity;
(function (Entity) {
    Entity["FUNCTION"] = "FUNCTION";
    Entity["VARIABLE"] = "VARIABLE";
    Entity["CONSTANT"] = "CONSTANT";
    Entity["OPERATION_PHRASE"] = "OPERATION PHRASE";
    Entity["NS"] = "NUMBER SYSTEM";
    Entity["UNIT"] = "UNIT";
    Entity["CONVERTER"] = "CONVERTER";
    Entity["SCALE"] = "SCALE";
})(Entity || (Entity = {}));
exports.Entity = Entity;
