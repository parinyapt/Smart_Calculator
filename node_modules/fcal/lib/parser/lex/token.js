"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TT;
(function (TT) {
    TT["PLUS"] = "+";
    TT["MINUS"] = "-";
    TT["TIMES"] = "*";
    TT["MOD"] = "mod";
    TT["SLASH"] = "/";
    TT["Number"] = "number";
    TT["OPEN_PAREN"] = "(";
    TT["CLOSE_PAREN"] = ")";
    TT["NEWLINE"] = "\n";
    TT["EOL"] = "EOL";
    TT["IN"] = "in";
    TT["NAME"] = "name";
    TT["EQUAL"] = "=";
    TT["COMMA"] = ",";
    TT["PERCENTAGE"] = "%";
    TT["OF"] = "of";
    TT["UNIT"] = "unit";
    TT["CAP"] = "^";
    TT["NS"] = "ns";
    TT["DOUBLE_COLON"] = ":";
    TT["FLOOR_DIVIDE"] = "//";
    TT["LESS_EQUAL"] = "<=";
    TT["GREATER_EQUAL"] = ">=";
    TT["LESS_EQUAL_EQUAL"] = "<==";
    TT["GREATER_EQUAL_EQUAL"] = ">==";
    TT["LESS"] = "<";
    TT["GREATER"] = ">";
    TT["EQUAL_EQUAL"] = "==";
    TT["EQUAL_EQUAL_EQUAL"] = "===";
    TT["NOT_EQUAL"] = "!=";
    TT["NOT_EQUAL_EQUAL"] = "!==";
    TT["NOT"] = "!";
    TT["AND"] = "&&";
    TT["OR"] = "||";
    TT["Q"] = "?";
    TT["CC"] = "cc";
    TT["PLUS_EQUAL"] = "+=";
    TT["MINUS_EQUAL"] = "-=";
    TT["DIVIDE_EQUAL"] = "/=";
    TT["FLOOR_DIVIDE_EQUAL"] = "//=";
    TT["MULTIPLY_EQUAL"] = "*=";
    TT["POWER_EQUAL"] = "^=";
    TT["SCALE"] = "scale";
})(TT || (TT = {}));
exports.TT = TT;
class Token {
    constructor(type, lexeme, literal, start, end) {
        this.type = type;
        this.lexeme = lexeme;
        this.start = start;
        this.end = end;
        this.literal = literal;
    }
    static EOL(end) {
        return new Token(TT.EOL, 'EOL', null, end, end);
    }
}
exports.Token = Token;
