"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fcal_1 = require("../fcal");
const datatype_1 = require("../types/datatype");
const symboltable_1 = require("./symboltable");
/**
 * Represents runtime variable environment
 * It represents state of fcal
 */
class Environment {
    /**
     * Creates new environment
     * @param {FcalFunction.List}functions list of functions
     * @param {SymbolTable} symbolTable symbol table
     * @param {Constant} constants constants
     */
    constructor(functions, symbolTable, constants) {
        this.values = new Map();
        this.functions = functions;
        this.symbolTable = symbolTable;
        this.constants = constants;
        this.values.set('_', new datatype_1.Type.BNumber(0));
    }
    /**
     * Get the value of variable
     * @param {String} key variable name
     * @throws {FcalError} Error if variable is not available
     */
    get(key, start, end) {
        const v = this.values.get(key) || this.constants.get(key);
        if (v) {
            return v;
        }
        throw new fcal_1.FcalError(`Undefined variable ${key}`, start, end);
    }
    /**
     * create or assign a variable with value
     * @param {string} key variable name
     * @param {ValInputType} value value
     */
    set(key, value) {
        const en = this.symbolTable.get(key);
        if (en && en === symboltable_1.Entity.CONSTANT) {
            throw new fcal_1.FcalError(`Can't reassign constant ${key}`);
        }
        if (!this.values.has(key)) {
            this.symbolTable.set(key, symboltable_1.Entity.VARIABLE);
        }
        if (value instanceof datatype_1.Type) {
            this.values.set(key, value);
            return;
        }
        this.values.set(key, datatype_1.Type.BNumber.New(value));
    }
    /**
     * import values from  Object or Map
     * @param {Object | Map} values
     */
    use(values) {
        if (values instanceof Map) {
            values.forEach((value, key) => {
                this.set(key, value);
            });
            return;
        }
        for (const key in values) {
            if (values.hasOwnProperty(key)) {
                const element = values[key];
                this.set(key, element);
            }
        }
    }
}
exports.Environment = Environment;
