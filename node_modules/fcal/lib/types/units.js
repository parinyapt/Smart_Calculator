"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const decimal_js_1 = require("decimal.js");
const symboltable_1 = require("../evaluator/symboltable");
class UnitMeta {
    constructor(id, ratio, unitType) {
        this.id = id;
        this.r = ratio;
        this.b = new decimal_js_1.Decimal(0);
        this.unitType = unitType;
        this.plural = unitType;
        this.singular = unitType;
    }
    get ratio() {
        if (this.r instanceof decimal_js_1.Decimal) {
            return this.r;
        }
        const value = this.r();
        if (value instanceof decimal_js_1.Decimal) {
            return value;
        }
        return new decimal_js_1.Decimal(value);
    }
    get bias() {
        if (this.b instanceof decimal_js_1.Decimal) {
            return this.b;
        }
        const value = this.b();
        if (value instanceof decimal_js_1.Decimal) {
            return value;
        }
        return new decimal_js_1.Decimal(value);
    }
    setBias(value) {
        this.b = value;
    }
    setPlural(value) {
        this.plural = value;
    }
    setSingular(value) {
        this.singular = value;
    }
}
exports.UnitMeta = UnitMeta;
/**
 * Represents unit with info
 */
class Unit {
    constructor(id, ratio, unitType, phrases) {
        this.phrases = phrases;
        if (ratio instanceof decimal_js_1.Decimal || typeof ratio === 'function') {
            this.meta = new UnitMeta(id, ratio, unitType);
            return;
        }
        this.meta = new UnitMeta(id, new decimal_js_1.Decimal(ratio), unitType);
    }
    setBias(value) {
        if (value instanceof decimal_js_1.Decimal) {
            this.meta.setBias(value);
            return this;
        }
        if (typeof value === 'function') {
            this.meta.setBias(value);
            return this;
        }
        this.meta.setBias(new decimal_js_1.Decimal(value));
        return this;
    }
    Plural(value) {
        this.meta.setPlural(value);
        return this;
    }
    Singular(value) {
        this.meta.setSingular(value);
        return this;
    }
}
exports.Unit = Unit;
// tslint:disable-next-line:no-namespace
(function (Unit) {
    Unit.LENGTH_ID = 'LENGTH';
    Unit.SPEED_ID = 'SPEED';
    Unit.TIME_ID = 'TIME';
    Unit.TEMPERATURE_ID = 'TEMPERATURE';
    Unit.MASS_ID = 'MASS';
    Unit.DIGITAL_ID = 'DIGITAL STORAGE';
    /**
     * List of {Unit} sunits
     */
    class List {
        constructor(symbolTable) {
            this.symbolTable = symbolTable;
            this.units = new Map();
        }
        /**
         * Add a new unit
         * @param {Unit} unit
         * @throws {FcalError} Error if phrases already exists
         */
        push(unit) {
            for (const phrase1 of unit.phrases) {
                this.symbolTable.set(phrase1, symboltable_1.Entity.UNIT);
                this.units.set(phrase1, unit);
            }
        }
        /**
         * get the unit by its phrase
         * @param {string} phrase
         * @returns {UnitMeta | null }
         */
        get(phrase) {
            const c = this.units.get(phrase);
            if (c) {
                return c.meta;
            }
            return null;
        }
    }
    Unit.List = List;
})(Unit || (Unit = {}));
exports.Unit = Unit;
